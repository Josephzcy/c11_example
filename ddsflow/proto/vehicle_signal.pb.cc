// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_signal.proto

#include "vehicle_signal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto;
namespace minieye {
class VehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSignal_SignalsEntry_DoNotUse> _instance;
} _VehicleSignal_SignalsEntry_DoNotUse_default_instance_;
class VehicleSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSignal> _instance;
} _VehicleSignal_default_instance_;
class CommandSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandSignal> _instance;
} _CommandSignal_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_CommandSignal_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CommandSignal_default_instance_;
    new (ptr) ::minieye::CommandSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CommandSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandSignal_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandSignal_vehicle_5fsignal_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_VehicleSignal_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VehicleSignal_default_instance_;
    new (ptr) ::minieye::VehicleSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::VehicleSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleSignal_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleSignal_vehicle_5fsignal_2eproto}, {
      &scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto.base,}};

static void InitDefaultsscc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VehicleSignal_SignalsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::VehicleSignal_SignalsEntry_DoNotUse();
  }
  ::minieye::VehicleSignal_SignalsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fsignal_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vehicle_5fsignal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fsignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, signal_tm_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, signals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CommandSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CommandSignal, signal_),
  PROTOBUF_FIELD_OFFSET(::minieye::CommandSignal, details_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::minieye::VehicleSignal_SignalsEntry_DoNotUse)},
  { 9, -1, sizeof(::minieye::VehicleSignal)},
  { 16, -1, sizeof(::minieye::CommandSignal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VehicleSignal_SignalsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VehicleSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CommandSignal_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024vehicle_signal.proto\022\007minieye\032\031google/"
  "protobuf/any.proto\"\217\007\n\rVehicleSignal\022\021\n\t"
  "signal_tm\030\001 \001(\004\0224\n\007signals\030\002 \003(\0132#.minie"
  "ye.VehicleSignal.SignalsEntry\032.\n\014Signals"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\002:\0028\001\"\204\006"
  "\n\nSignalType\022\014\n\010kInvalid\020\000\022\027\n\023kSteeringW"
  "heelAngle\020\001\022\030\n\024kSteeringWheelDirect\020\002\022\017\n"
  "\013kLenkmoment\020\003\022\023\n\017kLenkmomentQbit\020\004\022\021\n\rk"
  "WheelSpeedFl\020\005\022\027\n\023kWheelSpeedFlDirect\020\006\022"
  "\021\n\rkWheelSpeedFr\020\007\022\027\n\023kWheelSpeedFrDirec"
  "t\020\010\022\021\n\rkWheelSpeedRl\020\t\022\027\n\023kWheelSpeedRlD"
  "irect\020\n\022\021\n\rkWheelSpeedRr\020\013\022\027\n\023kWheelSpee"
  "dRrDirect\020\014\022\017\n\013kTargetGear\020\r\022\024\n\020kShortDi"
  "sRadarFl\020\016\022\025\n\021kShortDisRadarFlm\020\017\022\025\n\021kSh"
  "ortDisRadarFrm\020\020\022\024\n\020kShortDisRadarFr\020\021\022\024"
  "\n\020kShortDisRadarBl\020\022\022\025\n\021kShortDisRadarBl"
  "m\020\023\022\025\n\021kShortDisRadarBrm\020\024\022\024\n\020kShortDisR"
  "adarBr\020\025\022\023\n\017kLongDisRadarFl\020\026\022\023\n\017kLongDi"
  "sRadarFr\020\027\022\023\n\017kLongDisRadarBl\020\030\022\023\n\017kLong"
  "DisRadarBr\020\031\022\022\n\016kWheelSpeed2Fl\020\032\022\022\n\016kWhe"
  "elSpeed2Fr\020\033\022\022\n\016kWheelSpeed2Rl\020\034\022\022\n\016kWhe"
  "elSpeed2Rr\020\035\022\r\n\tkGierrate\020\036\022\023\n\017kGierrate"
  "Direct\020\037\022\023\n\017kLongitudinalAc\020 \022\020\n\014kLatera"
  "llyAc\020!\022\016\n\nkPlaStatus\020\"\022\014\n\010kPlaResp\020#\022\r\n"
  "\tkCanSpeed\020$\"\205\001\n\rCommandSignal\0221\n\006signal"
  "\030\001 \001(\0162!.minieye.CommandSignal.SignalTyp"
  "e\022%\n\007details\030\002 \001(\0132\024.google.protobuf.Any"
  "\"\032\n\nSignalType\022\014\n\010kUnknown\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fsignal_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fsignal_2eproto_sccs[3] = {
  &scc_info_CommandSignal_vehicle_5fsignal_2eproto.base,
  &scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base,
  &scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fsignal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fsignal_2eproto = {
  false, false, descriptor_table_protodef_vehicle_5fsignal_2eproto, "vehicle_signal.proto", 1116,
  &descriptor_table_vehicle_5fsignal_2eproto_once, descriptor_table_vehicle_5fsignal_2eproto_sccs, descriptor_table_vehicle_5fsignal_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_vehicle_5fsignal_2eproto::offsets,
  file_level_metadata_vehicle_5fsignal_2eproto, 3, file_level_enum_descriptors_vehicle_5fsignal_2eproto, file_level_service_descriptors_vehicle_5fsignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fsignal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fsignal_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleSignal_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fsignal_2eproto);
  return file_level_enum_descriptors_vehicle_5fsignal_2eproto[0];
}
bool VehicleSignal_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VehicleSignal_SignalType VehicleSignal::kInvalid;
constexpr VehicleSignal_SignalType VehicleSignal::kSteeringWheelAngle;
constexpr VehicleSignal_SignalType VehicleSignal::kSteeringWheelDirect;
constexpr VehicleSignal_SignalType VehicleSignal::kLenkmoment;
constexpr VehicleSignal_SignalType VehicleSignal::kLenkmomentQbit;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedFl;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedFlDirect;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedFr;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedFrDirect;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedRl;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedRlDirect;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedRr;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeedRrDirect;
constexpr VehicleSignal_SignalType VehicleSignal::kTargetGear;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarFl;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarFlm;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarFrm;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarFr;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarBl;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarBlm;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarBrm;
constexpr VehicleSignal_SignalType VehicleSignal::kShortDisRadarBr;
constexpr VehicleSignal_SignalType VehicleSignal::kLongDisRadarFl;
constexpr VehicleSignal_SignalType VehicleSignal::kLongDisRadarFr;
constexpr VehicleSignal_SignalType VehicleSignal::kLongDisRadarBl;
constexpr VehicleSignal_SignalType VehicleSignal::kLongDisRadarBr;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeed2Fl;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeed2Fr;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeed2Rl;
constexpr VehicleSignal_SignalType VehicleSignal::kWheelSpeed2Rr;
constexpr VehicleSignal_SignalType VehicleSignal::kGierrate;
constexpr VehicleSignal_SignalType VehicleSignal::kGierrateDirect;
constexpr VehicleSignal_SignalType VehicleSignal::kLongitudinalAc;
constexpr VehicleSignal_SignalType VehicleSignal::kLaterallyAc;
constexpr VehicleSignal_SignalType VehicleSignal::kPlaStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kPlaResp;
constexpr VehicleSignal_SignalType VehicleSignal::kCanSpeed;
constexpr VehicleSignal_SignalType VehicleSignal::SignalType_MIN;
constexpr VehicleSignal_SignalType VehicleSignal::SignalType_MAX;
constexpr int VehicleSignal::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandSignal_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fsignal_2eproto);
  return file_level_enum_descriptors_vehicle_5fsignal_2eproto[1];
}
bool CommandSignal_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommandSignal_SignalType CommandSignal::kUnknown;
constexpr CommandSignal_SignalType CommandSignal::SignalType_MIN;
constexpr CommandSignal_SignalType CommandSignal::SignalType_MAX;
constexpr int CommandSignal::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

VehicleSignal_SignalsEntry_DoNotUse::VehicleSignal_SignalsEntry_DoNotUse() {}
VehicleSignal_SignalsEntry_DoNotUse::VehicleSignal_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VehicleSignal_SignalsEntry_DoNotUse::MergeFrom(const VehicleSignal_SignalsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VehicleSignal_SignalsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VehicleSignal_SignalsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VehicleSignal::InitAsDefaultInstance() {
}
class VehicleSignal::_Internal {
 public:
};

VehicleSignal::VehicleSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.VehicleSignal)
}
VehicleSignal::VehicleSignal(const VehicleSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signals_.MergeFrom(from.signals_);
  signal_tm_ = from.signal_tm_;
  // @@protoc_insertion_point(copy_constructor:minieye.VehicleSignal)
}

void VehicleSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base);
  signal_tm_ = PROTOBUF_ULONGLONG(0);
}

VehicleSignal::~VehicleSignal() {
  // @@protoc_insertion_point(destructor:minieye.VehicleSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleSignal::ArenaDtor(void* object) {
  VehicleSignal* _this = reinterpret_cast< VehicleSignal* >(object);
  (void)_this;
}
void VehicleSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleSignal& VehicleSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void VehicleSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.VehicleSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  signal_tm_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 signal_tm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          signal_tm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, float> signals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&signals_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.VehicleSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 signal_tm = 1;
  if (this->signal_tm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signal_tm(), target);
  }

  // map<int32, float> signals = 2;
  if (!this->_internal_signals().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_signals().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_signals().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VehicleSignal_SignalsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it) {
        target = VehicleSignal_SignalsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.VehicleSignal)
  return target;
}

size_t VehicleSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.VehicleSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, float> signals = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signals_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->_internal_signals().begin();
      it != this->_internal_signals().end(); ++it) {
    total_size += VehicleSignal_SignalsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 signal_tm = 1;
  if (this->signal_tm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_signal_tm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.VehicleSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.VehicleSignal)
    MergeFrom(*source);
  }
}

void VehicleSignal::MergeFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  if (from.signal_tm() != 0) {
    _internal_set_signal_tm(from._internal_signal_tm());
  }
}

void VehicleSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSignal::CopyFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSignal::IsInitialized() const {
  return true;
}

void VehicleSignal::InternalSwap(VehicleSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.Swap(&other->signals_);
  swap(signal_tm_, other->signal_tm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandSignal::InitAsDefaultInstance() {
  ::minieye::_CommandSignal_default_instance_._instance.get_mutable()->details_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class CommandSignal::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& details(const CommandSignal* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
CommandSignal::_Internal::details(const CommandSignal* msg) {
  return *msg->details_;
}
void CommandSignal::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
CommandSignal::CommandSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CommandSignal)
}
CommandSignal::CommandSignal(const CommandSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new PROTOBUF_NAMESPACE_ID::Any(*from.details_);
  } else {
    details_ = nullptr;
  }
  signal_ = from.signal_;
  // @@protoc_insertion_point(copy_constructor:minieye.CommandSignal)
}

void CommandSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandSignal_vehicle_5fsignal_2eproto.base);
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&details_)) + sizeof(signal_));
}

CommandSignal::~CommandSignal() {
  // @@protoc_insertion_point(destructor:minieye.CommandSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete details_;
}

void CommandSignal::ArenaDtor(void* object) {
  CommandSignal* _this = reinterpret_cast< CommandSignal* >(object);
  (void)_this;
}
void CommandSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandSignal& CommandSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandSignal_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void CommandSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CommandSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  signal_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.CommandSignal.SignalType signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signal(static_cast<::minieye::CommandSignal_SignalType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CommandSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.CommandSignal.SignalType signal = 1;
  if (this->signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signal(), target);
  }

  // .google.protobuf.Any details = 2;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CommandSignal)
  return target;
}

size_t CommandSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CommandSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any details = 2;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // .minieye.CommandSignal.SignalType signal = 1;
  if (this->signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CommandSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CommandSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CommandSignal)
    MergeFrom(*source);
  }
}

void CommandSignal::MergeFrom(const CommandSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CommandSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    _internal_mutable_details()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_details());
  }
  if (from.signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
}

void CommandSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CommandSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSignal::CopyFrom(const CommandSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CommandSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSignal::IsInitialized() const {
  return true;
}

void CommandSignal::InternalSwap(CommandSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSignal, signal_)
      + sizeof(CommandSignal::signal_)
      - PROTOBUF_FIELD_OFFSET(CommandSignal, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::VehicleSignal_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::VehicleSignal_SignalsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VehicleSignal_SignalsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::VehicleSignal* Arena::CreateMaybeMessage< ::minieye::VehicleSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VehicleSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CommandSignal* Arena::CreateMaybeMessage< ::minieye::CommandSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CommandSignal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
