// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto;
namespace minieye {
class Control;
class ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::Control* Arena::CreateMaybeMessage<::minieye::Control>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class Control PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Control) */ {
 public:
  inline Control() : Control(nullptr) {}
  virtual ~Control();

  Control(const Control& from);
  Control(Control&& from) noexcept
    : Control() {
    *this = ::std::move(from);
  }

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control& operator=(Control&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Control& a, Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Control* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Control* New() const final {
    return CreateMaybeMessage<Control>(nullptr);
  }

  Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Control>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Control";
  }
  protected:
  explicit Control(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_2eproto);
    return ::descriptor_table_control_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideFieldNumber = 2,
    kProgressBarFieldNumber = 3,
    kControlFlagFieldNumber = 1,
    kControlCircleFieldNumber = 4,
    kPlaVzLwSollFieldNumber = 5,
    kPlaLwSollFieldNumber = 6,
    kPlaStatusPlaEspFieldNumber = 7,
    kPlaStatusPlaEpsFieldNumber = 8,
    kBrakeReqFieldNumber = 9,
    kBrakeCmdFieldNumber = 10,
  };
  // uint32 guide = 2;
  void clear_guide();
  ::PROTOBUF_NAMESPACE_ID::uint32 guide() const;
  void set_guide(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guide() const;
  void _internal_set_guide(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 progress_bar = 3;
  void clear_progress_bar();
  ::PROTOBUF_NAMESPACE_ID::uint32 progress_bar() const;
  void set_progress_bar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_progress_bar() const;
  void _internal_set_progress_bar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool control_flag = 1;
  void clear_control_flag();
  bool control_flag() const;
  void set_control_flag(bool value);
  private:
  bool _internal_control_flag() const;
  void _internal_set_control_flag(bool value);
  public:

  // bool control_circle = 4;
  void clear_control_circle();
  bool control_circle() const;
  void set_control_circle(bool value);
  private:
  bool _internal_control_circle() const;
  void _internal_set_control_circle(bool value);
  public:

  // bool pla_vz_lw_soll = 5;
  void clear_pla_vz_lw_soll();
  bool pla_vz_lw_soll() const;
  void set_pla_vz_lw_soll(bool value);
  private:
  bool _internal_pla_vz_lw_soll() const;
  void _internal_set_pla_vz_lw_soll(bool value);
  public:

  // bool pla_lw_soll = 6;
  void clear_pla_lw_soll();
  bool pla_lw_soll() const;
  void set_pla_lw_soll(bool value);
  private:
  bool _internal_pla_lw_soll() const;
  void _internal_set_pla_lw_soll(bool value);
  public:

  // uint32 pla_status_pla_esp = 7;
  void clear_pla_status_pla_esp();
  ::PROTOBUF_NAMESPACE_ID::uint32 pla_status_pla_esp() const;
  void set_pla_status_pla_esp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pla_status_pla_esp() const;
  void _internal_set_pla_status_pla_esp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pla_status_pla_eps = 8;
  void clear_pla_status_pla_eps();
  ::PROTOBUF_NAMESPACE_ID::uint32 pla_status_pla_eps() const;
  void set_pla_status_pla_eps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pla_status_pla_eps() const;
  void _internal_set_pla_status_pla_eps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool brake_req = 9;
  void clear_brake_req();
  bool brake_req() const;
  void set_brake_req(bool value);
  private:
  bool _internal_brake_req() const;
  void _internal_set_brake_req(bool value);
  public:

  // float brake_cmd = 10;
  void clear_brake_cmd();
  float brake_cmd() const;
  void set_brake_cmd(float value);
  private:
  float _internal_brake_cmd() const;
  void _internal_set_brake_cmd(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.Control)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guide_;
  ::PROTOBUF_NAMESPACE_ID::uint32 progress_bar_;
  bool control_flag_;
  bool control_circle_;
  bool pla_vz_lw_soll_;
  bool pla_lw_soll_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pla_status_pla_esp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pla_status_pla_eps_;
  bool brake_req_;
  float brake_cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Control

// bool control_flag = 1;
inline void Control::clear_control_flag() {
  control_flag_ = false;
}
inline bool Control::_internal_control_flag() const {
  return control_flag_;
}
inline bool Control::control_flag() const {
  // @@protoc_insertion_point(field_get:minieye.Control.control_flag)
  return _internal_control_flag();
}
inline void Control::_internal_set_control_flag(bool value) {
  
  control_flag_ = value;
}
inline void Control::set_control_flag(bool value) {
  _internal_set_control_flag(value);
  // @@protoc_insertion_point(field_set:minieye.Control.control_flag)
}

// uint32 guide = 2;
inline void Control::clear_guide() {
  guide_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::_internal_guide() const {
  return guide_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::guide() const {
  // @@protoc_insertion_point(field_get:minieye.Control.guide)
  return _internal_guide();
}
inline void Control::_internal_set_guide(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guide_ = value;
}
inline void Control::set_guide(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guide(value);
  // @@protoc_insertion_point(field_set:minieye.Control.guide)
}

// uint32 progress_bar = 3;
inline void Control::clear_progress_bar() {
  progress_bar_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::_internal_progress_bar() const {
  return progress_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::progress_bar() const {
  // @@protoc_insertion_point(field_get:minieye.Control.progress_bar)
  return _internal_progress_bar();
}
inline void Control::_internal_set_progress_bar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  progress_bar_ = value;
}
inline void Control::set_progress_bar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_progress_bar(value);
  // @@protoc_insertion_point(field_set:minieye.Control.progress_bar)
}

// bool control_circle = 4;
inline void Control::clear_control_circle() {
  control_circle_ = false;
}
inline bool Control::_internal_control_circle() const {
  return control_circle_;
}
inline bool Control::control_circle() const {
  // @@protoc_insertion_point(field_get:minieye.Control.control_circle)
  return _internal_control_circle();
}
inline void Control::_internal_set_control_circle(bool value) {
  
  control_circle_ = value;
}
inline void Control::set_control_circle(bool value) {
  _internal_set_control_circle(value);
  // @@protoc_insertion_point(field_set:minieye.Control.control_circle)
}

// bool pla_vz_lw_soll = 5;
inline void Control::clear_pla_vz_lw_soll() {
  pla_vz_lw_soll_ = false;
}
inline bool Control::_internal_pla_vz_lw_soll() const {
  return pla_vz_lw_soll_;
}
inline bool Control::pla_vz_lw_soll() const {
  // @@protoc_insertion_point(field_get:minieye.Control.pla_vz_lw_soll)
  return _internal_pla_vz_lw_soll();
}
inline void Control::_internal_set_pla_vz_lw_soll(bool value) {
  
  pla_vz_lw_soll_ = value;
}
inline void Control::set_pla_vz_lw_soll(bool value) {
  _internal_set_pla_vz_lw_soll(value);
  // @@protoc_insertion_point(field_set:minieye.Control.pla_vz_lw_soll)
}

// bool pla_lw_soll = 6;
inline void Control::clear_pla_lw_soll() {
  pla_lw_soll_ = false;
}
inline bool Control::_internal_pla_lw_soll() const {
  return pla_lw_soll_;
}
inline bool Control::pla_lw_soll() const {
  // @@protoc_insertion_point(field_get:minieye.Control.pla_lw_soll)
  return _internal_pla_lw_soll();
}
inline void Control::_internal_set_pla_lw_soll(bool value) {
  
  pla_lw_soll_ = value;
}
inline void Control::set_pla_lw_soll(bool value) {
  _internal_set_pla_lw_soll(value);
  // @@protoc_insertion_point(field_set:minieye.Control.pla_lw_soll)
}

// uint32 pla_status_pla_esp = 7;
inline void Control::clear_pla_status_pla_esp() {
  pla_status_pla_esp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::_internal_pla_status_pla_esp() const {
  return pla_status_pla_esp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::pla_status_pla_esp() const {
  // @@protoc_insertion_point(field_get:minieye.Control.pla_status_pla_esp)
  return _internal_pla_status_pla_esp();
}
inline void Control::_internal_set_pla_status_pla_esp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pla_status_pla_esp_ = value;
}
inline void Control::set_pla_status_pla_esp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pla_status_pla_esp(value);
  // @@protoc_insertion_point(field_set:minieye.Control.pla_status_pla_esp)
}

// uint32 pla_status_pla_eps = 8;
inline void Control::clear_pla_status_pla_eps() {
  pla_status_pla_eps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::_internal_pla_status_pla_eps() const {
  return pla_status_pla_eps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Control::pla_status_pla_eps() const {
  // @@protoc_insertion_point(field_get:minieye.Control.pla_status_pla_eps)
  return _internal_pla_status_pla_eps();
}
inline void Control::_internal_set_pla_status_pla_eps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pla_status_pla_eps_ = value;
}
inline void Control::set_pla_status_pla_eps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pla_status_pla_eps(value);
  // @@protoc_insertion_point(field_set:minieye.Control.pla_status_pla_eps)
}

// bool brake_req = 9;
inline void Control::clear_brake_req() {
  brake_req_ = false;
}
inline bool Control::_internal_brake_req() const {
  return brake_req_;
}
inline bool Control::brake_req() const {
  // @@protoc_insertion_point(field_get:minieye.Control.brake_req)
  return _internal_brake_req();
}
inline void Control::_internal_set_brake_req(bool value) {
  
  brake_req_ = value;
}
inline void Control::set_brake_req(bool value) {
  _internal_set_brake_req(value);
  // @@protoc_insertion_point(field_set:minieye.Control.brake_req)
}

// float brake_cmd = 10;
inline void Control::clear_brake_cmd() {
  brake_cmd_ = 0;
}
inline float Control::_internal_brake_cmd() const {
  return brake_cmd_;
}
inline float Control::brake_cmd() const {
  // @@protoc_insertion_point(field_get:minieye.Control.brake_cmd)
  return _internal_brake_cmd();
}
inline void Control::_internal_set_brake_cmd(float value) {
  
  brake_cmd_ = value;
}
inline void Control::set_brake_cmd(float value) {
  _internal_set_brake_cmd(value);
  // @@protoc_insertion_point(field_set:minieye.Control.brake_cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_2eproto
