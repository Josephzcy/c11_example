// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apastate.proto

#include "apastate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingSlot_parkingspace_2eproto;
namespace minieye {
class ApaStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApaState> _instance;
} _ApaState_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_ApaState_apastate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ApaState_default_instance_;
    new (ptr) ::minieye::ApaState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ApaState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApaState_apastate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApaState_apastate_2eproto}, {
      &scc_info_ParkingSlot_parkingspace_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_apastate_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_apastate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_apastate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_apastate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ApaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ApaState, park_state_),
  PROTOBUF_FIELD_OFFSET(::minieye::ApaState, choosed_parking_slot_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::ApaState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ApaState_default_instance_),
};

const char descriptor_table_protodef_apastate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016apastate.proto\022\007minieye\032\022parkingspace."
  "proto\"\233\001\n\010ApaState\022\022\n\npark_state\030\001 \001(\005\0225"
  "\n\024choosed_parking_slot\030\002 \001(\0132\027.perceptio"
  "n.ParkingSlot\"D\n\006status\022\014\n\010kUnknown\020\000\022\016\n"
  "\nkSearching\020\001\022\014\n\010kParking\020\002\022\016\n\nkComplete"
  "d\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_apastate_2eproto_deps[1] = {
  &::descriptor_table_parkingspace_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_apastate_2eproto_sccs[1] = {
  &scc_info_ApaState_apastate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_apastate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apastate_2eproto = {
  false, false, descriptor_table_protodef_apastate_2eproto, "apastate.proto", 211,
  &descriptor_table_apastate_2eproto_once, descriptor_table_apastate_2eproto_sccs, descriptor_table_apastate_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_apastate_2eproto::offsets,
  file_level_metadata_apastate_2eproto, 1, file_level_enum_descriptors_apastate_2eproto, file_level_service_descriptors_apastate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_apastate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_apastate_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApaState_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apastate_2eproto);
  return file_level_enum_descriptors_apastate_2eproto[0];
}
bool ApaState_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApaState_status ApaState::kUnknown;
constexpr ApaState_status ApaState::kSearching;
constexpr ApaState_status ApaState::kParking;
constexpr ApaState_status ApaState::kCompleted;
constexpr ApaState_status ApaState::status_MIN;
constexpr ApaState_status ApaState::status_MAX;
constexpr int ApaState::status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ApaState::InitAsDefaultInstance() {
  ::minieye::_ApaState_default_instance_._instance.get_mutable()->choosed_parking_slot_ = const_cast< ::perception::ParkingSlot*>(
      ::perception::ParkingSlot::internal_default_instance());
}
class ApaState::_Internal {
 public:
  static const ::perception::ParkingSlot& choosed_parking_slot(const ApaState* msg);
};

const ::perception::ParkingSlot&
ApaState::_Internal::choosed_parking_slot(const ApaState* msg) {
  return *msg->choosed_parking_slot_;
}
void ApaState::clear_choosed_parking_slot() {
  if (GetArena() == nullptr && choosed_parking_slot_ != nullptr) {
    delete choosed_parking_slot_;
  }
  choosed_parking_slot_ = nullptr;
}
ApaState::ApaState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ApaState)
}
ApaState::ApaState(const ApaState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_choosed_parking_slot()) {
    choosed_parking_slot_ = new ::perception::ParkingSlot(*from.choosed_parking_slot_);
  } else {
    choosed_parking_slot_ = nullptr;
  }
  park_state_ = from.park_state_;
  // @@protoc_insertion_point(copy_constructor:minieye.ApaState)
}

void ApaState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApaState_apastate_2eproto.base);
  ::memset(&choosed_parking_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&park_state_) -
      reinterpret_cast<char*>(&choosed_parking_slot_)) + sizeof(park_state_));
}

ApaState::~ApaState() {
  // @@protoc_insertion_point(destructor:minieye.ApaState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApaState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete choosed_parking_slot_;
}

void ApaState::ArenaDtor(void* object) {
  ApaState* _this = reinterpret_cast< ApaState* >(object);
  (void)_this;
}
void ApaState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApaState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApaState& ApaState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApaState_apastate_2eproto.base);
  return *internal_default_instance();
}


void ApaState::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ApaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && choosed_parking_slot_ != nullptr) {
    delete choosed_parking_slot_;
  }
  choosed_parking_slot_ = nullptr;
  park_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApaState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 park_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          park_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.ParkingSlot choosed_parking_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_choosed_parking_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApaState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ApaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 park_state = 1;
  if (this->park_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_park_state(), target);
  }

  // .perception.ParkingSlot choosed_parking_slot = 2;
  if (this->has_choosed_parking_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::choosed_parking_slot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ApaState)
  return target;
}

size_t ApaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ApaState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.ParkingSlot choosed_parking_slot = 2;
  if (this->has_choosed_parking_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *choosed_parking_slot_);
  }

  // int32 park_state = 1;
  if (this->park_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_park_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApaState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ApaState)
  GOOGLE_DCHECK_NE(&from, this);
  const ApaState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApaState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ApaState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ApaState)
    MergeFrom(*source);
  }
}

void ApaState::MergeFrom(const ApaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ApaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_choosed_parking_slot()) {
    _internal_mutable_choosed_parking_slot()->::perception::ParkingSlot::MergeFrom(from._internal_choosed_parking_slot());
  }
  if (from.park_state() != 0) {
    _internal_set_park_state(from._internal_park_state());
  }
}

void ApaState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ApaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApaState::CopyFrom(const ApaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ApaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApaState::IsInitialized() const {
  return true;
}

void ApaState::InternalSwap(ApaState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApaState, park_state_)
      + sizeof(ApaState::park_state_)
      - PROTOBUF_FIELD_OFFSET(ApaState, choosed_parking_slot_)>(
          reinterpret_cast<char*>(&choosed_parking_slot_),
          reinterpret_cast<char*>(&other->choosed_parking_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApaState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::ApaState* Arena::CreateMaybeMessage< ::minieye::ApaState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ApaState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
