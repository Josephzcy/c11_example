// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parkingspace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parkingspace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parkingspace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parkingspace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parkingspace_2eproto;
namespace perception {
class CornerPt;
class CornerPtDefaultTypeInternal;
extern CornerPtDefaultTypeInternal _CornerPt_default_instance_;
class ParkingSlot;
class ParkingSlotDefaultTypeInternal;
extern ParkingSlotDefaultTypeInternal _ParkingSlot_default_instance_;
class ParkingSpace;
class ParkingSpaceDefaultTypeInternal;
extern ParkingSpaceDefaultTypeInternal _ParkingSpace_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::CornerPt* Arena::CreateMaybeMessage<::perception::CornerPt>(Arena*);
template<> ::perception::ParkingSlot* Arena::CreateMaybeMessage<::perception::ParkingSlot>(Arena*);
template<> ::perception::ParkingSpace* Arena::CreateMaybeMessage<::perception::ParkingSpace>(Arena*);
template<> ::perception::Point2D* Arena::CreateMaybeMessage<::perception::Point2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum ParkingSlot_ParkSlotType : int {
  ParkingSlot_ParkSlotType_kUnknown = 0,
  ParkingSlot_ParkSlotType_kVerticalSpot = 1,
  ParkingSlot_ParkSlotType_kHorizontalSpot = 2,
  ParkingSlot_ParkSlotType_kObliqueSpot = 3,
  ParkingSlot_ParkSlotType_ParkingSlot_ParkSlotType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkingSlot_ParkSlotType_ParkingSlot_ParkSlotType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkingSlot_ParkSlotType_IsValid(int value);
constexpr ParkingSlot_ParkSlotType ParkingSlot_ParkSlotType_ParkSlotType_MIN = ParkingSlot_ParkSlotType_kUnknown;
constexpr ParkingSlot_ParkSlotType ParkingSlot_ParkSlotType_ParkSlotType_MAX = ParkingSlot_ParkSlotType_kObliqueSpot;
constexpr int ParkingSlot_ParkSlotType_ParkSlotType_ARRAYSIZE = ParkingSlot_ParkSlotType_ParkSlotType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_ParkSlotType_descriptor();
template<typename T>
inline const std::string& ParkingSlot_ParkSlotType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlot_ParkSlotType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlot_ParkSlotType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlot_ParkSlotType_descriptor(), enum_t_value);
}
inline bool ParkingSlot_ParkSlotType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParkingSlot_ParkSlotType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlot_ParkSlotType>(
    ParkingSlot_ParkSlotType_descriptor(), name, value);
}
// ===================================================================

class Point2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {}
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// -------------------------------------------------------------------

class CornerPt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.CornerPt) */ {
 public:
  inline CornerPt() : CornerPt(nullptr) {}
  virtual ~CornerPt();

  CornerPt(const CornerPt& from);
  CornerPt(CornerPt&& from) noexcept
    : CornerPt() {
    *this = ::std::move(from);
  }

  inline CornerPt& operator=(const CornerPt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CornerPt& operator=(CornerPt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CornerPt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CornerPt* internal_default_instance() {
    return reinterpret_cast<const CornerPt*>(
               &_CornerPt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CornerPt& a, CornerPt& b) {
    a.Swap(&b);
  }
  inline void Swap(CornerPt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CornerPt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CornerPt* New() const final {
    return CreateMaybeMessage<CornerPt>(nullptr);
  }

  CornerPt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CornerPt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CornerPt& from);
  void MergeFrom(const CornerPt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CornerPt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.CornerPt";
  }
  protected:
  explicit CornerPt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePtFieldNumber = 2,
    kWorldPtFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .perception.Point2D image_pt = 2;
  bool has_image_pt() const;
  private:
  bool _internal_has_image_pt() const;
  public:
  void clear_image_pt();
  const ::perception::Point2D& image_pt() const;
  ::perception::Point2D* release_image_pt();
  ::perception::Point2D* mutable_image_pt();
  void set_allocated_image_pt(::perception::Point2D* image_pt);
  private:
  const ::perception::Point2D& _internal_image_pt() const;
  ::perception::Point2D* _internal_mutable_image_pt();
  public:
  void unsafe_arena_set_allocated_image_pt(
      ::perception::Point2D* image_pt);
  ::perception::Point2D* unsafe_arena_release_image_pt();

  // .perception.Point2D world_pt = 3;
  bool has_world_pt() const;
  private:
  bool _internal_has_world_pt() const;
  public:
  void clear_world_pt();
  const ::perception::Point2D& world_pt() const;
  ::perception::Point2D* release_world_pt();
  ::perception::Point2D* mutable_world_pt();
  void set_allocated_world_pt(::perception::Point2D* world_pt);
  private:
  const ::perception::Point2D& _internal_world_pt() const;
  ::perception::Point2D* _internal_mutable_world_pt();
  public:
  void unsafe_arena_set_allocated_world_pt(
      ::perception::Point2D* world_pt);
  ::perception::Point2D* unsafe_arena_release_world_pt();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.CornerPt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::Point2D* image_pt_;
  ::perception::Point2D* world_pt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// -------------------------------------------------------------------

class ParkingSlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.ParkingSlot) */ {
 public:
  inline ParkingSlot() : ParkingSlot(nullptr) {}
  virtual ~ParkingSlot();

  ParkingSlot(const ParkingSlot& from);
  ParkingSlot(ParkingSlot&& from) noexcept
    : ParkingSlot() {
    *this = ::std::move(from);
  }

  inline ParkingSlot& operator=(const ParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSlot& operator=(ParkingSlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlot* internal_default_instance() {
    return reinterpret_cast<const ParkingSlot*>(
               &_ParkingSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParkingSlot& a, ParkingSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingSlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlot* New() const final {
    return CreateMaybeMessage<ParkingSlot>(nullptr);
  }

  ParkingSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSlot& from);
  void MergeFrom(const ParkingSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.ParkingSlot";
  }
  protected:
  explicit ParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ParkingSlot_ParkSlotType ParkSlotType;
  static constexpr ParkSlotType kUnknown =
    ParkingSlot_ParkSlotType_kUnknown;
  static constexpr ParkSlotType kVerticalSpot =
    ParkingSlot_ParkSlotType_kVerticalSpot;
  static constexpr ParkSlotType kHorizontalSpot =
    ParkingSlot_ParkSlotType_kHorizontalSpot;
  static constexpr ParkSlotType kObliqueSpot =
    ParkingSlot_ParkSlotType_kObliqueSpot;
  static inline bool ParkSlotType_IsValid(int value) {
    return ParkingSlot_ParkSlotType_IsValid(value);
  }
  static constexpr ParkSlotType ParkSlotType_MIN =
    ParkingSlot_ParkSlotType_ParkSlotType_MIN;
  static constexpr ParkSlotType ParkSlotType_MAX =
    ParkingSlot_ParkSlotType_ParkSlotType_MAX;
  static constexpr int ParkSlotType_ARRAYSIZE =
    ParkingSlot_ParkSlotType_ParkSlotType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParkSlotType_descriptor() {
    return ParkingSlot_ParkSlotType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParkSlotType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParkSlotType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParkSlotType_Name.");
    return ParkingSlot_ParkSlotType_Name(enum_t_value);
  }
  static inline bool ParkSlotType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ParkSlotType* value) {
    return ParkingSlot_ParkSlotType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCornerPtsFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kOccupiedFieldNumber = 4,
    kWidthFieldNumber = 5,
    kLengthFieldNumber = 6,
  };
  // repeated .perception.CornerPt corner_pts = 2;
  int corner_pts_size() const;
  private:
  int _internal_corner_pts_size() const;
  public:
  void clear_corner_pts();
  ::perception::CornerPt* mutable_corner_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >*
      mutable_corner_pts();
  private:
  const ::perception::CornerPt& _internal_corner_pts(int index) const;
  ::perception::CornerPt* _internal_add_corner_pts();
  public:
  const ::perception::CornerPt& corner_pts(int index) const;
  ::perception::CornerPt* add_corner_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >&
      corner_pts() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .perception.ParkingSlot.ParkSlotType type = 3;
  void clear_type();
  ::perception::ParkingSlot_ParkSlotType type() const;
  void set_type(::perception::ParkingSlot_ParkSlotType value);
  private:
  ::perception::ParkingSlot_ParkSlotType _internal_type() const;
  void _internal_set_type(::perception::ParkingSlot_ParkSlotType value);
  public:

  // bool occupied = 4;
  void clear_occupied();
  bool occupied() const;
  void set_occupied(bool value);
  private:
  bool _internal_occupied() const;
  void _internal_set_occupied(bool value);
  public:

  // int32 width = 5;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 6;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.ParkingSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt > corner_pts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  bool occupied_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// -------------------------------------------------------------------

class ParkingSpace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.ParkingSpace) */ {
 public:
  inline ParkingSpace() : ParkingSpace(nullptr) {}
  virtual ~ParkingSpace();

  ParkingSpace(const ParkingSpace& from);
  ParkingSpace(ParkingSpace&& from) noexcept
    : ParkingSpace() {
    *this = ::std::move(from);
  }

  inline ParkingSpace& operator=(const ParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSpace& operator=(ParkingSpace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSpace* internal_default_instance() {
    return reinterpret_cast<const ParkingSpace*>(
               &_ParkingSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ParkingSpace& a, ParkingSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingSpace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingSpace* New() const final {
    return CreateMaybeMessage<ParkingSpace>(nullptr);
  }

  ParkingSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSpace& from);
  void MergeFrom(const ParkingSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.ParkingSpace";
  }
  protected:
  explicit ParkingSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParkslotsFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // repeated .perception.ParkingSlot parkslots = 1;
  int parkslots_size() const;
  private:
  int _internal_parkslots_size() const;
  public:
  void clear_parkslots();
  ::perception::ParkingSlot* mutable_parkslots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >*
      mutable_parkslots();
  private:
  const ::perception::ParkingSlot& _internal_parkslots(int index) const;
  ::perception::ParkingSlot* _internal_add_parkslots();
  public:
  const ::perception::ParkingSlot& parkslots(int index) const;
  ::perception::ParkingSlot* add_parkslots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >&
      parkslots() const;

  // uint64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.ParkingSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot > parkslots_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2D

// double x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline double Point2D::_internal_x() const {
  return x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:perception.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.Point2D.x)
}

// double y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline double Point2D::_internal_y() const {
  return y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:perception.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.Point2D.y)
}

// -------------------------------------------------------------------

// CornerPt

// uint32 id = 1;
inline void CornerPt::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CornerPt::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CornerPt::id() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.id)
  return _internal_id();
}
inline void CornerPt::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CornerPt::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.CornerPt.id)
}

// .perception.Point2D image_pt = 2;
inline bool CornerPt::_internal_has_image_pt() const {
  return this != internal_default_instance() && image_pt_ != nullptr;
}
inline bool CornerPt::has_image_pt() const {
  return _internal_has_image_pt();
}
inline void CornerPt::clear_image_pt() {
  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
}
inline const ::perception::Point2D& CornerPt::_internal_image_pt() const {
  const ::perception::Point2D* p = image_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Point2D*>(
      &::perception::_Point2D_default_instance_);
}
inline const ::perception::Point2D& CornerPt::image_pt() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.image_pt)
  return _internal_image_pt();
}
inline void CornerPt::unsafe_arena_set_allocated_image_pt(
    ::perception::Point2D* image_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  image_pt_ = image_pt;
  if (image_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.CornerPt.image_pt)
}
inline ::perception::Point2D* CornerPt::release_image_pt() {
  
  ::perception::Point2D* temp = image_pt_;
  image_pt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::Point2D* CornerPt::unsafe_arena_release_image_pt() {
  // @@protoc_insertion_point(field_release:perception.CornerPt.image_pt)
  
  ::perception::Point2D* temp = image_pt_;
  image_pt_ = nullptr;
  return temp;
}
inline ::perception::Point2D* CornerPt::_internal_mutable_image_pt() {
  
  if (image_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Point2D>(GetArena());
    image_pt_ = p;
  }
  return image_pt_;
}
inline ::perception::Point2D* CornerPt::mutable_image_pt() {
  // @@protoc_insertion_point(field_mutable:perception.CornerPt.image_pt)
  return _internal_mutable_image_pt();
}
inline void CornerPt::set_allocated_image_pt(::perception::Point2D* image_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_pt_;
  }
  if (image_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_pt);
    if (message_arena != submessage_arena) {
      image_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_pt, submessage_arena);
    }
    
  } else {
    
  }
  image_pt_ = image_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.CornerPt.image_pt)
}

// .perception.Point2D world_pt = 3;
inline bool CornerPt::_internal_has_world_pt() const {
  return this != internal_default_instance() && world_pt_ != nullptr;
}
inline bool CornerPt::has_world_pt() const {
  return _internal_has_world_pt();
}
inline void CornerPt::clear_world_pt() {
  if (GetArena() == nullptr && world_pt_ != nullptr) {
    delete world_pt_;
  }
  world_pt_ = nullptr;
}
inline const ::perception::Point2D& CornerPt::_internal_world_pt() const {
  const ::perception::Point2D* p = world_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Point2D*>(
      &::perception::_Point2D_default_instance_);
}
inline const ::perception::Point2D& CornerPt::world_pt() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.world_pt)
  return _internal_world_pt();
}
inline void CornerPt::unsafe_arena_set_allocated_world_pt(
    ::perception::Point2D* world_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_pt_);
  }
  world_pt_ = world_pt;
  if (world_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.CornerPt.world_pt)
}
inline ::perception::Point2D* CornerPt::release_world_pt() {
  
  ::perception::Point2D* temp = world_pt_;
  world_pt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::Point2D* CornerPt::unsafe_arena_release_world_pt() {
  // @@protoc_insertion_point(field_release:perception.CornerPt.world_pt)
  
  ::perception::Point2D* temp = world_pt_;
  world_pt_ = nullptr;
  return temp;
}
inline ::perception::Point2D* CornerPt::_internal_mutable_world_pt() {
  
  if (world_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Point2D>(GetArena());
    world_pt_ = p;
  }
  return world_pt_;
}
inline ::perception::Point2D* CornerPt::mutable_world_pt() {
  // @@protoc_insertion_point(field_mutable:perception.CornerPt.world_pt)
  return _internal_mutable_world_pt();
}
inline void CornerPt::set_allocated_world_pt(::perception::Point2D* world_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete world_pt_;
  }
  if (world_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(world_pt);
    if (message_arena != submessage_arena) {
      world_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_pt, submessage_arena);
    }
    
  } else {
    
  }
  world_pt_ = world_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.CornerPt.world_pt)
}

// -------------------------------------------------------------------

// ParkingSlot

// uint32 id = 1;
inline void ParkingSlot::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::id() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.id)
  return _internal_id();
}
inline void ParkingSlot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ParkingSlot::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.id)
}

// repeated .perception.CornerPt corner_pts = 2;
inline int ParkingSlot::_internal_corner_pts_size() const {
  return corner_pts_.size();
}
inline int ParkingSlot::corner_pts_size() const {
  return _internal_corner_pts_size();
}
inline void ParkingSlot::clear_corner_pts() {
  corner_pts_.Clear();
}
inline ::perception::CornerPt* ParkingSlot::mutable_corner_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.ParkingSlot.corner_pts)
  return corner_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >*
ParkingSlot::mutable_corner_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.ParkingSlot.corner_pts)
  return &corner_pts_;
}
inline const ::perception::CornerPt& ParkingSlot::_internal_corner_pts(int index) const {
  return corner_pts_.Get(index);
}
inline const ::perception::CornerPt& ParkingSlot::corner_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.corner_pts)
  return _internal_corner_pts(index);
}
inline ::perception::CornerPt* ParkingSlot::_internal_add_corner_pts() {
  return corner_pts_.Add();
}
inline ::perception::CornerPt* ParkingSlot::add_corner_pts() {
  // @@protoc_insertion_point(field_add:perception.ParkingSlot.corner_pts)
  return _internal_add_corner_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >&
ParkingSlot::corner_pts() const {
  // @@protoc_insertion_point(field_list:perception.ParkingSlot.corner_pts)
  return corner_pts_;
}

// .perception.ParkingSlot.ParkSlotType type = 3;
inline void ParkingSlot::clear_type() {
  type_ = 0;
}
inline ::perception::ParkingSlot_ParkSlotType ParkingSlot::_internal_type() const {
  return static_cast< ::perception::ParkingSlot_ParkSlotType >(type_);
}
inline ::perception::ParkingSlot_ParkSlotType ParkingSlot::type() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.type)
  return _internal_type();
}
inline void ParkingSlot::_internal_set_type(::perception::ParkingSlot_ParkSlotType value) {
  
  type_ = value;
}
inline void ParkingSlot::set_type(::perception::ParkingSlot_ParkSlotType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.type)
}

// bool occupied = 4;
inline void ParkingSlot::clear_occupied() {
  occupied_ = false;
}
inline bool ParkingSlot::_internal_occupied() const {
  return occupied_;
}
inline bool ParkingSlot::occupied() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.occupied)
  return _internal_occupied();
}
inline void ParkingSlot::_internal_set_occupied(bool value) {
  
  occupied_ = value;
}
inline void ParkingSlot::set_occupied(bool value) {
  _internal_set_occupied(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.occupied)
}

// int32 width = 5;
inline void ParkingSlot::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingSlot::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingSlot::width() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.width)
  return _internal_width();
}
inline void ParkingSlot::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ParkingSlot::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.width)
}

// int32 length = 6;
inline void ParkingSlot::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingSlot::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingSlot::length() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.length)
  return _internal_length();
}
inline void ParkingSlot::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void ParkingSlot::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.length)
}

// -------------------------------------------------------------------

// ParkingSpace

// repeated .perception.ParkingSlot parkslots = 1;
inline int ParkingSpace::_internal_parkslots_size() const {
  return parkslots_.size();
}
inline int ParkingSpace::parkslots_size() const {
  return _internal_parkslots_size();
}
inline void ParkingSpace::clear_parkslots() {
  parkslots_.Clear();
}
inline ::perception::ParkingSlot* ParkingSpace::mutable_parkslots(int index) {
  // @@protoc_insertion_point(field_mutable:perception.ParkingSpace.parkslots)
  return parkslots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >*
ParkingSpace::mutable_parkslots() {
  // @@protoc_insertion_point(field_mutable_list:perception.ParkingSpace.parkslots)
  return &parkslots_;
}
inline const ::perception::ParkingSlot& ParkingSpace::_internal_parkslots(int index) const {
  return parkslots_.Get(index);
}
inline const ::perception::ParkingSlot& ParkingSpace::parkslots(int index) const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.parkslots)
  return _internal_parkslots(index);
}
inline ::perception::ParkingSlot* ParkingSpace::_internal_add_parkslots() {
  return parkslots_.Add();
}
inline ::perception::ParkingSlot* ParkingSpace::add_parkslots() {
  // @@protoc_insertion_point(field_add:perception.ParkingSpace.parkslots)
  return _internal_add_parkslots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >&
ParkingSpace::parkslots() const {
  // @@protoc_insertion_point(field_list:perception.ParkingSpace.parkslots)
  return parkslots_;
}

// uint64 frame_id = 2;
inline void ParkingSpace::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.frame_id)
  return _internal_frame_id();
}
inline void ParkingSpace::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ParkingSpace::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSpace.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::ParkingSlot_ParkSlotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::ParkingSlot_ParkSlotType>() {
  return ::perception::ParkingSlot_ParkSlotType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parkingspace_2eproto
