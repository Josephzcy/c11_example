// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Control> _instance;
} _Control_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_Control_control_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Control_default_instance_;
    new (ptr) ::minieye::Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Control::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Control_control_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Control_control_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Control, control_flag_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, guide_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, progress_bar_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, control_circle_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, pla_vz_lw_soll_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, pla_lw_soll_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, pla_status_pla_esp_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, pla_status_pla_eps_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, brake_req_),
  PROTOBUF_FIELD_OFFSET(::minieye::Control, brake_cmd_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::Control)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Control_default_instance_),
};

const char descriptor_table_protodef_control_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcontrol.proto\022\007minieye\"\347\001\n\007Control\022\024\n\014"
  "control_flag\030\001 \001(\010\022\r\n\005guide\030\002 \001(\r\022\024\n\014pro"
  "gress_bar\030\003 \001(\r\022\026\n\016control_circle\030\004 \001(\010\022"
  "\026\n\016pla_vz_lw_soll\030\005 \001(\010\022\023\n\013pla_lw_soll\030\006"
  " \001(\010\022\032\n\022pla_status_pla_esp\030\007 \001(\r\022\032\n\022pla_"
  "status_pla_eps\030\010 \001(\r\022\021\n\tbrake_req\030\t \001(\010\022"
  "\021\n\tbrake_cmd\030\n \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_2eproto_sccs[1] = {
  &scc_info_Control_control_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto = {
  false, false, descriptor_table_protodef_control_2eproto, "control.proto", 266,
  &descriptor_table_control_2eproto_once, descriptor_table_control_2eproto_sccs, descriptor_table_control_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_control_2eproto::offsets,
  file_level_metadata_control_2eproto, 1, file_level_enum_descriptors_control_2eproto, file_level_service_descriptors_control_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_2eproto)), true);
namespace minieye {

// ===================================================================

void Control::InitAsDefaultInstance() {
}
class Control::_Internal {
 public:
};

Control::Control(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guide_, &from.guide_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_cmd_) -
    reinterpret_cast<char*>(&guide_)) + sizeof(brake_cmd_));
  // @@protoc_insertion_point(copy_constructor:minieye.Control)
}

void Control::SharedCtor() {
  ::memset(&guide_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_cmd_) -
      reinterpret_cast<char*>(&guide_)) + sizeof(brake_cmd_));
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:minieye.Control)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Control::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Control::ArenaDtor(void* object) {
  Control* _this = reinterpret_cast< Control* >(object);
  (void)_this;
}
void Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Control& Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Control_control_2eproto.base);
  return *internal_default_instance();
}


void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guide_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_cmd_) -
      reinterpret_cast<char*>(&guide_)) + sizeof(brake_cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool control_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          control_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 guide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 progress_bar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          progress_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool control_circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          control_circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pla_vz_lw_soll = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pla_vz_lw_soll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pla_lw_soll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pla_lw_soll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pla_status_pla_esp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pla_status_pla_esp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pla_status_pla_eps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pla_status_pla_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool brake_req = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          brake_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float brake_cmd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool control_flag = 1;
  if (this->control_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_control_flag(), target);
  }

  // uint32 guide = 2;
  if (this->guide() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guide(), target);
  }

  // uint32 progress_bar = 3;
  if (this->progress_bar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_progress_bar(), target);
  }

  // bool control_circle = 4;
  if (this->control_circle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_control_circle(), target);
  }

  // bool pla_vz_lw_soll = 5;
  if (this->pla_vz_lw_soll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pla_vz_lw_soll(), target);
  }

  // bool pla_lw_soll = 6;
  if (this->pla_lw_soll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_pla_lw_soll(), target);
  }

  // uint32 pla_status_pla_esp = 7;
  if (this->pla_status_pla_esp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pla_status_pla_esp(), target);
  }

  // uint32 pla_status_pla_eps = 8;
  if (this->pla_status_pla_eps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pla_status_pla_eps(), target);
  }

  // bool brake_req = 9;
  if (this->brake_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_brake_req(), target);
  }

  // float brake_cmd = 10;
  if (!(this->brake_cmd() <= 0 && this->brake_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Control)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guide = 2;
  if (this->guide() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guide());
  }

  // uint32 progress_bar = 3;
  if (this->progress_bar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_progress_bar());
  }

  // bool control_flag = 1;
  if (this->control_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool control_circle = 4;
  if (this->control_circle() != 0) {
    total_size += 1 + 1;
  }

  // bool pla_vz_lw_soll = 5;
  if (this->pla_vz_lw_soll() != 0) {
    total_size += 1 + 1;
  }

  // bool pla_lw_soll = 6;
  if (this->pla_lw_soll() != 0) {
    total_size += 1 + 1;
  }

  // uint32 pla_status_pla_esp = 7;
  if (this->pla_status_pla_esp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pla_status_pla_esp());
  }

  // uint32 pla_status_pla_eps = 8;
  if (this->pla_status_pla_eps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pla_status_pla_eps());
  }

  // bool brake_req = 9;
  if (this->brake_req() != 0) {
    total_size += 1 + 1;
  }

  // float brake_cmd = 10;
  if (!(this->brake_cmd() <= 0 && this->brake_cmd() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guide() != 0) {
    _internal_set_guide(from._internal_guide());
  }
  if (from.progress_bar() != 0) {
    _internal_set_progress_bar(from._internal_progress_bar());
  }
  if (from.control_flag() != 0) {
    _internal_set_control_flag(from._internal_control_flag());
  }
  if (from.control_circle() != 0) {
    _internal_set_control_circle(from._internal_control_circle());
  }
  if (from.pla_vz_lw_soll() != 0) {
    _internal_set_pla_vz_lw_soll(from._internal_pla_vz_lw_soll());
  }
  if (from.pla_lw_soll() != 0) {
    _internal_set_pla_lw_soll(from._internal_pla_lw_soll());
  }
  if (from.pla_status_pla_esp() != 0) {
    _internal_set_pla_status_pla_esp(from._internal_pla_status_pla_esp());
  }
  if (from.pla_status_pla_eps() != 0) {
    _internal_set_pla_status_pla_eps(from._internal_pla_status_pla_eps());
  }
  if (from.brake_req() != 0) {
    _internal_set_brake_req(from._internal_brake_req());
  }
  if (!(from.brake_cmd() <= 0 && from.brake_cmd() >= 0)) {
    _internal_set_brake_cmd(from._internal_brake_cmd());
  }
}

void Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control, brake_cmd_)
      + sizeof(Control::brake_cmd_)
      - PROTOBUF_FIELD_OFFSET(Control, guide_)>(
          reinterpret_cast<char*>(&guide_),
          reinterpret_cast<char*>(&other->guide_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::Control* Arena::CreateMaybeMessage< ::minieye::Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Control >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
