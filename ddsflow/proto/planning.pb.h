// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_2eproto;
namespace minieye {
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Planning;
class PlanningDefaultTypeInternal;
extern PlanningDefaultTypeInternal _Planning_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::Path* Arena::CreateMaybeMessage<::minieye::Path>(Arena*);
template<> ::minieye::Planning* Arena::CreateMaybeMessage<::minieye::Planning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveDirectFieldNumber = 1,
    kTurnRadiusFieldNumber = 2,
    kMoveDistanceFieldNumber = 3,
  };
  // uint32 move_direct = 1;
  void clear_move_direct();
  ::PROTOBUF_NAMESPACE_ID::uint32 move_direct() const;
  void set_move_direct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_move_direct() const;
  void _internal_set_move_direct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float turn_radius = 2;
  void clear_turn_radius();
  float turn_radius() const;
  void set_turn_radius(float value);
  private:
  float _internal_turn_radius() const;
  void _internal_set_turn_radius(float value);
  public:

  // float move_distance = 3;
  void clear_move_distance();
  float move_distance() const;
  void set_move_distance(float value);
  private:
  float _internal_move_distance() const;
  void _internal_set_move_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 move_direct_;
  float turn_radius_;
  float move_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class Planning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Planning) */ {
 public:
  inline Planning() : Planning(nullptr) {}
  virtual ~Planning();

  Planning(const Planning& from);
  Planning(Planning&& from) noexcept
    : Planning() {
    *this = ::std::move(from);
  }

  inline Planning& operator=(const Planning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Planning& operator=(Planning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Planning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Planning* internal_default_instance() {
    return reinterpret_cast<const Planning*>(
               &_Planning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Planning& a, Planning& b) {
    a.Swap(&b);
  }
  inline void Swap(Planning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Planning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Planning* New() const final {
    return CreateMaybeMessage<Planning>(nullptr);
  }

  Planning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Planning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Planning& from);
  void MergeFrom(const Planning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Planning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Planning";
  }
  protected:
  explicit Planning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanningPathFieldNumber = 2,
    kPlanningStatusFieldNumber = 1,
  };
  // repeated .minieye.Path planning_path = 2;
  int planning_path_size() const;
  private:
  int _internal_planning_path_size() const;
  public:
  void clear_planning_path();
  ::minieye::Path* mutable_planning_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::Path >*
      mutable_planning_path();
  private:
  const ::minieye::Path& _internal_planning_path(int index) const;
  ::minieye::Path* _internal_add_planning_path();
  public:
  const ::minieye::Path& planning_path(int index) const;
  ::minieye::Path* add_planning_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::Path >&
      planning_path() const;

  // uint32 planning_status = 1;
  void clear_planning_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 planning_status() const;
  void set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_planning_status() const;
  void _internal_set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.Planning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::Path > planning_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 planning_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Path

// uint32 move_direct = 1;
inline void Path::clear_move_direct() {
  move_direct_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::_internal_move_direct() const {
  return move_direct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::move_direct() const {
  // @@protoc_insertion_point(field_get:minieye.Path.move_direct)
  return _internal_move_direct();
}
inline void Path::_internal_set_move_direct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  move_direct_ = value;
}
inline void Path::set_move_direct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_move_direct(value);
  // @@protoc_insertion_point(field_set:minieye.Path.move_direct)
}

// float turn_radius = 2;
inline void Path::clear_turn_radius() {
  turn_radius_ = 0;
}
inline float Path::_internal_turn_radius() const {
  return turn_radius_;
}
inline float Path::turn_radius() const {
  // @@protoc_insertion_point(field_get:minieye.Path.turn_radius)
  return _internal_turn_radius();
}
inline void Path::_internal_set_turn_radius(float value) {
  
  turn_radius_ = value;
}
inline void Path::set_turn_radius(float value) {
  _internal_set_turn_radius(value);
  // @@protoc_insertion_point(field_set:minieye.Path.turn_radius)
}

// float move_distance = 3;
inline void Path::clear_move_distance() {
  move_distance_ = 0;
}
inline float Path::_internal_move_distance() const {
  return move_distance_;
}
inline float Path::move_distance() const {
  // @@protoc_insertion_point(field_get:minieye.Path.move_distance)
  return _internal_move_distance();
}
inline void Path::_internal_set_move_distance(float value) {
  
  move_distance_ = value;
}
inline void Path::set_move_distance(float value) {
  _internal_set_move_distance(value);
  // @@protoc_insertion_point(field_set:minieye.Path.move_distance)
}

// -------------------------------------------------------------------

// Planning

// uint32 planning_status = 1;
inline void Planning::clear_planning_status() {
  planning_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Planning::_internal_planning_status() const {
  return planning_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Planning::planning_status() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.planning_status)
  return _internal_planning_status();
}
inline void Planning::_internal_set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  planning_status_ = value;
}
inline void Planning::set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_planning_status(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.planning_status)
}

// repeated .minieye.Path planning_path = 2;
inline int Planning::_internal_planning_path_size() const {
  return planning_path_.size();
}
inline int Planning::planning_path_size() const {
  return _internal_planning_path_size();
}
inline void Planning::clear_planning_path() {
  planning_path_.Clear();
}
inline ::minieye::Path* Planning::mutable_planning_path(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.Planning.planning_path)
  return planning_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::Path >*
Planning::mutable_planning_path() {
  // @@protoc_insertion_point(field_mutable_list:minieye.Planning.planning_path)
  return &planning_path_;
}
inline const ::minieye::Path& Planning::_internal_planning_path(int index) const {
  return planning_path_.Get(index);
}
inline const ::minieye::Path& Planning::planning_path(int index) const {
  // @@protoc_insertion_point(field_get:minieye.Planning.planning_path)
  return _internal_planning_path(index);
}
inline ::minieye::Path* Planning::_internal_add_planning_path() {
  return planning_path_.Add();
}
inline ::minieye::Path* Planning::add_planning_path() {
  // @@protoc_insertion_point(field_add:minieye.Planning.planning_path)
  return _internal_add_planning_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::Path >&
Planning::planning_path() const {
  // @@protoc_insertion_point(field_list:minieye.Planning.planning_path)
  return planning_path_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planning_2eproto
