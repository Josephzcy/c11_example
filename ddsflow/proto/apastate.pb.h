// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apastate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apastate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apastate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parkingspace.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apastate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apastate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apastate_2eproto;
namespace minieye {
class ApaState;
class ApaStateDefaultTypeInternal;
extern ApaStateDefaultTypeInternal _ApaState_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::ApaState* Arena::CreateMaybeMessage<::minieye::ApaState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum ApaState_status : int {
  ApaState_status_kUnknown = 0,
  ApaState_status_kSearching = 1,
  ApaState_status_kParking = 2,
  ApaState_status_kCompleted = 3,
  ApaState_status_ApaState_status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApaState_status_ApaState_status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApaState_status_IsValid(int value);
constexpr ApaState_status ApaState_status_status_MIN = ApaState_status_kUnknown;
constexpr ApaState_status ApaState_status_status_MAX = ApaState_status_kCompleted;
constexpr int ApaState_status_status_ARRAYSIZE = ApaState_status_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApaState_status_descriptor();
template<typename T>
inline const std::string& ApaState_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApaState_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApaState_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApaState_status_descriptor(), enum_t_value);
}
inline bool ApaState_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApaState_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApaState_status>(
    ApaState_status_descriptor(), name, value);
}
// ===================================================================

class ApaState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ApaState) */ {
 public:
  inline ApaState() : ApaState(nullptr) {}
  virtual ~ApaState();

  ApaState(const ApaState& from);
  ApaState(ApaState&& from) noexcept
    : ApaState() {
    *this = ::std::move(from);
  }

  inline ApaState& operator=(const ApaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApaState& operator=(ApaState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApaState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApaState* internal_default_instance() {
    return reinterpret_cast<const ApaState*>(
               &_ApaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApaState& a, ApaState& b) {
    a.Swap(&b);
  }
  inline void Swap(ApaState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApaState* New() const final {
    return CreateMaybeMessage<ApaState>(nullptr);
  }

  ApaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApaState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApaState& from);
  void MergeFrom(const ApaState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApaState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ApaState";
  }
  protected:
  explicit ApaState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apastate_2eproto);
    return ::descriptor_table_apastate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApaState_status status;
  static constexpr status kUnknown =
    ApaState_status_kUnknown;
  static constexpr status kSearching =
    ApaState_status_kSearching;
  static constexpr status kParking =
    ApaState_status_kParking;
  static constexpr status kCompleted =
    ApaState_status_kCompleted;
  static inline bool status_IsValid(int value) {
    return ApaState_status_IsValid(value);
  }
  static constexpr status status_MIN =
    ApaState_status_status_MIN;
  static constexpr status status_MAX =
    ApaState_status_status_MAX;
  static constexpr int status_ARRAYSIZE =
    ApaState_status_status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  status_descriptor() {
    return ApaState_status_descriptor();
  }
  template<typename T>
  static inline const std::string& status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function status_Name.");
    return ApaState_status_Name(enum_t_value);
  }
  static inline bool status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      status* value) {
    return ApaState_status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChoosedParkingSlotFieldNumber = 2,
    kParkStateFieldNumber = 1,
  };
  // .perception.ParkingSlot choosed_parking_slot = 2;
  bool has_choosed_parking_slot() const;
  private:
  bool _internal_has_choosed_parking_slot() const;
  public:
  void clear_choosed_parking_slot();
  const ::perception::ParkingSlot& choosed_parking_slot() const;
  ::perception::ParkingSlot* release_choosed_parking_slot();
  ::perception::ParkingSlot* mutable_choosed_parking_slot();
  void set_allocated_choosed_parking_slot(::perception::ParkingSlot* choosed_parking_slot);
  private:
  const ::perception::ParkingSlot& _internal_choosed_parking_slot() const;
  ::perception::ParkingSlot* _internal_mutable_choosed_parking_slot();
  public:
  void unsafe_arena_set_allocated_choosed_parking_slot(
      ::perception::ParkingSlot* choosed_parking_slot);
  ::perception::ParkingSlot* unsafe_arena_release_choosed_parking_slot();

  // int32 park_state = 1;
  void clear_park_state();
  ::PROTOBUF_NAMESPACE_ID::int32 park_state() const;
  void set_park_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_park_state() const;
  void _internal_set_park_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ApaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::ParkingSlot* choosed_parking_slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 park_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apastate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApaState

// int32 park_state = 1;
inline void ApaState::clear_park_state() {
  park_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApaState::_internal_park_state() const {
  return park_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApaState::park_state() const {
  // @@protoc_insertion_point(field_get:minieye.ApaState.park_state)
  return _internal_park_state();
}
inline void ApaState::_internal_set_park_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  park_state_ = value;
}
inline void ApaState::set_park_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_park_state(value);
  // @@protoc_insertion_point(field_set:minieye.ApaState.park_state)
}

// .perception.ParkingSlot choosed_parking_slot = 2;
inline bool ApaState::_internal_has_choosed_parking_slot() const {
  return this != internal_default_instance() && choosed_parking_slot_ != nullptr;
}
inline bool ApaState::has_choosed_parking_slot() const {
  return _internal_has_choosed_parking_slot();
}
inline const ::perception::ParkingSlot& ApaState::_internal_choosed_parking_slot() const {
  const ::perception::ParkingSlot* p = choosed_parking_slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::ParkingSlot*>(
      &::perception::_ParkingSlot_default_instance_);
}
inline const ::perception::ParkingSlot& ApaState::choosed_parking_slot() const {
  // @@protoc_insertion_point(field_get:minieye.ApaState.choosed_parking_slot)
  return _internal_choosed_parking_slot();
}
inline void ApaState::unsafe_arena_set_allocated_choosed_parking_slot(
    ::perception::ParkingSlot* choosed_parking_slot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(choosed_parking_slot_);
  }
  choosed_parking_slot_ = choosed_parking_slot;
  if (choosed_parking_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.ApaState.choosed_parking_slot)
}
inline ::perception::ParkingSlot* ApaState::release_choosed_parking_slot() {
  
  ::perception::ParkingSlot* temp = choosed_parking_slot_;
  choosed_parking_slot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::ParkingSlot* ApaState::unsafe_arena_release_choosed_parking_slot() {
  // @@protoc_insertion_point(field_release:minieye.ApaState.choosed_parking_slot)
  
  ::perception::ParkingSlot* temp = choosed_parking_slot_;
  choosed_parking_slot_ = nullptr;
  return temp;
}
inline ::perception::ParkingSlot* ApaState::_internal_mutable_choosed_parking_slot() {
  
  if (choosed_parking_slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::ParkingSlot>(GetArena());
    choosed_parking_slot_ = p;
  }
  return choosed_parking_slot_;
}
inline ::perception::ParkingSlot* ApaState::mutable_choosed_parking_slot() {
  // @@protoc_insertion_point(field_mutable:minieye.ApaState.choosed_parking_slot)
  return _internal_mutable_choosed_parking_slot();
}
inline void ApaState::set_allocated_choosed_parking_slot(::perception::ParkingSlot* choosed_parking_slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(choosed_parking_slot_);
  }
  if (choosed_parking_slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(choosed_parking_slot)->GetArena();
    if (message_arena != submessage_arena) {
      choosed_parking_slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, choosed_parking_slot, submessage_arena);
    }
    
  } else {
    
  }
  choosed_parking_slot_ = choosed_parking_slot;
  // @@protoc_insertion_point(field_set_allocated:minieye.ApaState.choosed_parking_slot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::ApaState_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::ApaState_status>() {
  return ::minieye::ApaState_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apastate_2eproto
